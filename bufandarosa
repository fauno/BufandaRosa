#!/bin/bash
#
#	cifrado y descifrado de mensajes y archivos
#	creacion de esteganografías y mensajes cifrados en QR
#	bufandarosa - versión 0.1.1
#

# --------------------------- funciones ---------------------------------

function uno {
	[ "$1" == "-h" ]&& echo 'elige un elemento de una lista, ejemplo: echo "a b c d" | uno ' && exit
	# elije uno al azar de una lista
        LISTA="`cat /dev/stdin | tr ' ' "\n"`"
        N=`echo "$LISTA" | wc -l`
        echo "$LISTA" | sed -n $[$RANDOM%$N+1]p
}
function metadatos {
	[ "$1" == "-h" ]&& echo 'borra los metadatos de un archivo, ejemplo: metadatos archivo.jpg ' && exit
	convert -strip "$1" "$1"
}
function tinyurl {
	[ "$1" == "-h" ]&& echo 'publica un archivo o mensaje en tinyurl (tiene espacio limitado), ejemplo: echo "hola" | tinyurl ' && exit
	descarga "https://tinyurl.com/create.php?url=data:text/html;charset=utf-8;base64,$1" \
	| grep -o "https\?://[^\"']\+" | sed 's/[<|\ ].*$//g' | grep "//tinyurl.com/..*" |  sort -u
}
function borrar {
	[ "$1" == "-h" ]&& echo 'borra un archivo (para simple), ejemplo: ' && exit
	shred -uz -n 10 "$1"
}
function nombre {
	[ "$1" == "-h" ]&& echo 'genera nombres al azar' && exit
	pwgen -1 $[$RANDOM%6+5]
}
function pastie {
	[ "$1" == "-h" ]&& echo 'envia un mensaje a un pastie al azar usando tor, ejemplo: `echo "hola" | pastie`' && exit
	f=`mktemp`
	cat /dev/stdin > $f
	proxychains wgetpaste -g -v -r \
	-n "`nombre`" \
	-s `echo "bpaste ca codepad dpaste gists poundpython" | uno` \
	$f | grep -o "https\?://[^\"']\+" | sed 's/[<|\ ].*$//g' | sort -u | progreso
	borrar $f
}
function cifrar {
	[ "$1" == "-h" ]&& echo 'cifra mensajes, ejmplo `echo "hola" | cifrar clave`' && exit
	cat /dev/stdin | mcrypt -u -k "$1" -F 2> /dev/null | base64 $2
}
function descifrar {
	[ "$1" == "-h" ]&& echo 'descifra mensajes, ejmplo `echo "hola" | cifrar clave | descifrar clave`' && exit
	cat /dev/stdin | tr "\n" " " | sed -e :a -e 's/<[^>]*>//g;/</N;//ba' \
	| sed 's/[^0-9A-Za-z=\/+-]//g' | base64 -d | mdecrypt - -k "$1" -F 2> /dev/null
}
function desesteganografia {
	[ "$1" == "-h" ]&& echo 'muestra el mensaje dentro de una archivo o un QR, ejemplo desesteganografia clave imagen`' && exit
	zbarimg --raw -q "$2" | descifrar "$1" || steghide extract -p "$1" -sf "$2" -xf -
}
function esteganografia {
	[ "$1" == "-h" ]&& echo 'guarda un mensaje dentro de una archivo, ejemplo `echo 'hola' | esteganografia clave imagen`' && exit
	cat /dev/stdin | steghide embed -ef - -p "$k" -cf "$cf"
}
function descarga {
	# me gustaria convertir esto en GET
	[ "$1" == "-h" ]&& echo 'descarga archivos con Tor, ejemplo `descarga http://loquesea.org`'  && exit
	proxychains wget "$1" "$2" -qO -
}
function basura {
	[ "$1" == "-h" ]&& echo "genera datos al azar" && exit
	basura=`pwgen -s -y 10000`
}
function ayuda {
	echo "Bufanda Rosa"
	echo "============"
	echo
	funciones="basura cifrar descarga descifrar nombre pastie tinyurl uno"
	for N in $funciones; do
		echo " $N		`$N -h`"
	done
}
#---------------------- ejecuta linea de comandos -----------------

while getopts c:h OPCION; do
        case $OPCION in
	c)
		function progreso {
			echo "espere por favor"
			cat /dev/stdin
		}
		eval ${OPTARG}
		exit
	;;
	h)
		echo "$0 "
		echo
		echo "  -h Esta ayuda"
		echo "  -i Instalación"
		echo "  -c linea de comandos"
		echo "  -c 'ayuda' muestra ayuda sobre los comendos"
		exit
	esac
done

#---------------------- funciones graficas -----------------
function opciones {
	while getopts t:m: OPCION; do
	        case $OPCION in
	                t) TITULO=${OPTARG}
	                ;;
	                m) MENSAJE=${OPTARG}
	                ;;
	        esac
	done
	# parametros
	N=0
	for T in $(cat /dev/stdin); do
		T=$(echo $T | sed 's/_/\ /g')
		C="$C $N \"$T\""
		N=$(($N+1))
	done
	# genera el menu
	eval "zenity --title \"$TITULO\" --text \"$MENSAJE\" --list --height=250 --column \"\" --column \"\" --hide-column 1  --hide-header $C"
}
function error {
	zenity --error --text="$*"
}
function alerta {
	zenity --warning --text="$(cat /dev/stdin)"
}
function clave {
	zenity --title "Clave" --text "Introducir la clave" --entry --entry-text="$*"
}
function url {
	zenity --title "URL" --text "Dirección" --entry --entry-text="$*" || exit
}
function archivo {
	zenity --title "Elije el archivo" --file-selection
}
function archivos {
	echo -e "$(zenity --title "Archivos" --text="Elije los archivos" --file-selection --multiple --separator="\n" \
	|| error "si necesita un archivo" && exit)"
}
function mensaje {
	zenity --title "Mensaje" --text="Escribe el mensaje" --width=450 --height=350 --text-info --editable \
	|| error "si necesita un mensaje" && exit
}
function mostrar {
	# mensaje de entrada
	MENSAJE=`cat /dev/stdin`
	if [ "$(echo "$MENSAJE" | wc -l )" == "1" ]; then
		zenity --title "Mensaje decifrado" --width=450 --text="$*" --entry --entry-text="$MENSAJE"
	else
		echo "$MENSAJE" | zenity --title "Mensaje decifrado" --text="$*" --width=450 --height=350 --text-info
	fi
	echo "$MENSAJE" | xsel -i
}
function progreso {
	zenity  --progress --pulsate --auto-close --auto-kill --no-cancel
	cat /dev/stdin
}


#--------------- instalacion -----------------

if [ "$1" == "-i" ]; then
	NOMBRE=`basename $0`
	#echo "$NOMBRE no está instalado" | mostrar
	echo -e "[Desktop Entry]\nName=$NOMBRE\nDescription=No tengo nada que ocultar, pero sí mucho que proteger\nIcon=help-faq\nType=Application\nExec=$NOMBRE\nCategories=GTK;Utility;" > /tmp/$NOMBRE.desktop
	# dependencias
	TMP=$(mktemp)

	# verifica el sistema operativo
	if [ "$(which yum)" ]; then
		aptitude="yum -y install"
	elif [ "$(which pacman)" ]; then
		aptitude="pacman -S"
	else
		aptitude="apt-get -y install"
	fi
	if [ "$(which gksu)" ]; then
		gksu="gksu"
	else
		gksu="su -c"
	fi
	echo "$aptitude imagemagick
	$aptitude steghide
	$aptitude mcrypt
	$aptitude zenity
	$aptitude tor
	$aptitude xsel
	$aptitude proxychains
	$aptitude zbar-tools
	$aptitude qrencode
	cp $NOMBRE /usr/bin/
	cp /tmp/$NOMBRE.desktop /usr/share/applications/$NOMBRE.desktop" > $TMP
	$gksu "bash $TMP" #| progreso
	rm $TMP
fi
# hacer que funcione en otros Sistemas operativos y que sea mas simple

# -------------------------- programa ----------------------------------

# ¿Que queres hacer?
MENU=`echo  "Cifrar Descifrar Publicación_Anónima Quitar_metadatos Eliminar_archivos Ayuda" | opciones -t "Bufanda Rosa" -m "¿Que queres hacer?"`

case $MENU in
	0 )
	# Cifrar
	#------------------ entrada ----------------------
	MENU=`echo -e "Escribir_mensaje Archivo" | opciones -t "Ciframe" -m "¿Que deseas proteger?"` || exit
	case $MENU in
		0 )
			ef=`mensaje`
		;;
		1 )
			ef=`cat $(archivo || exit)`
		;;
	esac
	k=`clave $(pwgen -s -y -1 $[$RANDOM%10+6])`
	MENU=`echo -e "Texto Imágen_o_Audio Imágen_al_azar_de_la_web Publicar_en_TinyURL Publicar_en_Pastie Código_QR" | opciones -t "¿En donde?" -m "¿Donde lo queres ocultar?"` || exit
	case $MENU in
		0 )
		# genera el mensaje y lo muestra en base64
		echo "$ef" | cifrar "$k" -w80 | mostrar
		;;
		1 )
		# guardar en un archivo (propio)
		b=`archivo || exit`
		basura | esteganografia "$k" "$cf"
		# guarda nuestro mensaje
		echo "$ef" | esteganografia "$k" "$cf"
		;;
		2 )
		# busca una imagen al azar en la web (con tor)
		# descarga el RSS para buscar imagenes
		cd $PICTURES
		# genera el nombre del archivo
		cf="`nombre`.jpg"
		for W in {1,2,3}; do
			# fuentes RSS
			FUENTE=`echo -e "http://ycpi.api.flickr.com/services/feeds/photos_public.gne\n\
			http://www.nasa.gov/rss/lg_image_of_the_day.rss\n\
			http://backend.deviantart.com/rss.xml" | uno`
			# url de la imagen
			img_url=`descarga $FUENTE\
			| grep -o '<*\(enclosure\|media:content\)[^>].*>' \
			| grep -o 'http://[^\" ]*' | uno`
			# directorio de imagenes
			echo $img_url > /dev/stderr
			descarga "$img_url" > "$cf"
			if [ -f "$cf" ]; then
				break
			fi
		done | progreso
		if [ ! -f "$cf" ]; then
			error
			exit
		fi
		# agrega mucha basura
		basura | esteganografia "$k" "$b"
		# genera la imagen con password real
		echo "$ef" | esteganografia "$k" "$b"
		xdg-open "$(pwd)/$cf"
		echo "$(pwd)/$cf" | mostrar "Imágen con un secreto"
		;;
		3 )
			# tinyurl
			# genera el mensaje y lo muestra en base64
			m=`echo "$ef" | cifrar "$k"  -w0`
			# si no se puede genera la tinyurl prueba varias veces
			tinyurl "$m" || tinyurl "$m" || tinyurl "$m" | progreso | mostrar || error "No se generó la tinyURL"
		;;
		4 )
			# genera el mensaje, lo publica y lo muestra en base64
			echo "$ef" | cifrar "$k" | pastie | mostrar
	   	;;
		5)
	                # genera codigo QR
			cd $PICTURES
			sf=`nombre`.png
			qrencode -o "$sf" "$(echo "$ef" | cifrar "$k" -w0)" || error "Los QR tienen espacio limitado"
			metadatos "$sf"
			echo "$(pwd)/$sf" | mostrar "Código QR generado"
	;;
	esac
	;;
	1 )
	# Descifrar

	# mensaje archivo o URL
	MENU=`echo -e "Mensaje Archivo_o_Código_QR Dirección_web" | opciones -t "Descifrar" -m "¿Dónde queres buscar?"` || exit
	case $MENU in
		0 )
			# texto
			t=`mensaje` || exit
			p=`clave`
		;;
		1 )
			# archivo
			sf=`archivo` || exit
		;;
		2 )
			URL=`url` || exit

			# archivo temporal
			sf=`mktemp`
			if [ "$(echo $URL | grep tinyurl)" ]; then
				# contenida en la URL
				echo "$(descarga "$URL" "-S" > /dev/null  2> /dev/stdout | grep "Location:" | cut -d, -f2)" > $sf
			else
				# crea un archivo temporal
				descarga "$URL" > $sf
			fi | progreso
			# mensaje descifrado en archivo
		;;
	esac

	# descifrado generico
	p=`clave`
	echo "`desesteganografia "$p" $sf || cat $sf | descifrar "$p"`" | mostrar
	borrar $sf

	;;
	2 )
		# publicacion anonima
		mensaje | pastie | mostrar
	;;
	3 )
		# Quitar metadatos
		archivos  || exit | while read ARCHIVO; do
			# falta quitar las caras
			# opcion para romper pixels
			metadatos "$ARCHIVO"
		done | progreso
	;;
	4 )
		# Eliminar archivos de modo seguro
		archivos | while read ARCHIVO; do
			# borra el archivo para simpre
			borrar "$ARCHIVO" | progreso
		done | progreso
	;;
	5 )
		echo -e "# Bufanda Rosa\n_No tengo nada que ocultar, pero sí mucho que proteger_\n\n" | mostrar
esac

exit

# Como funciona

- ¿Que queres hacer?

  1a. buscar mensaje
     1a. ¿campo de entrada para el mensaje?
     1b. ¿desde un archivo?
       a. buscar archivo
     1b. ¿desde una URL?
       a. Feed (busca descifra y se queda a la espera) con Tor
       b. Archivo lo descarga con Tor descifra y borra (de modo seguro)
     2. poner password
     3. mensaje descifrado

  1b. ¿Que queres ocultar?
     1a. Mensaje
       a. campo de entrada para el mensaje de texto
     1b. Archivo
       b. campo para elegir el archivo
     2. generar archivo con mensaje oculto
       1a. ¿elige un archivo?
         b. campo para elegir el archivo
       1b. ¿descarga una imagen o audio al azar?
       2. la modifica sustancialmente
       3. agrega el mensaje al archivo
     3a. Publicación
       4. publica de modo anonimo usando Tor
     3b. Guardar (sobre escribe el archivo)

## Quehaceres

- hacer mas generico el instalador
- version cli
- publicar en :
		# "http://www.cjb.net/"=>{"image"=>"____"},
   		# "http://kimag.es/"=>{"userfile1"=>"____"},
		# "http://tinypic.com/"=>{"the_file"=>$ARGV[0]}
		# "http://uploadpie.com/"=>{"uploadedfile"=>$ARGV[0]}
		# "http://imgur.com/"=>{'file[]'=>$ARGV[0]}
		# fileinput # archivo
		# expire=4 # un dia
		# http://uploadpie.com/


