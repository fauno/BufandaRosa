#!/bin/bash
#
#	Un meta cifrador, descrifrador y estenografia
#	con publicacion en tinyURL
#
#	version 0.1 alfa
#
# --------------------------- funciones ---------------------------------
if [ "$1" == "-h" ]; then
	echo "$0 "
	echo
	echo "  -h Esta ayuda"
	echo "  -i Instalación"
	exit
fi

function opciones {
	while getopts t:m: OPCION
	do
	        case $OPCION in
	                t) TITULO=${OPTARG}
	                ;;
	                m) MENSAJE=${OPTARG}
	                ;;
	        esac
	done
	# parametros
	N=0
	for T in $(cat /dev/stdin); do
		T=$(echo $T | sed 's/_/\ /g')
		C="$C $N \"$T\""
		N=$(($N+1))
	done
	# genera el menu
	eval "zenity --title \"$TITULO\" --text \"$MENSAJE\" --list --height=250 --column \"\" --column \"\" --hide-column 1  --hide-header $C"
}
function error {
	zenity --error
}
function clave {
	zenity --title "Clave" --text "Introducir la clave" --entry --entry-text="$*"
}
function url {
	zenity --title "URL" --text "Dirección" --entry --entry-text="$*"
}
function archivo {
	zenity --title "Elije el archivo" --file-selection
}
function archivos {
	echo -e "$(zenity --title "Archivos" --title "Elije el archivos" --file-selection --multiple --separator="\n")"
}
function mensaje {
	zenity --title "Mensaje" --text="introduce el mensaje" --width=450 --height=350 --text-info --editable
}
function mostrar {
	MENSAJE=`cat /dev/stdin`
	if [ "$(echo $MENSAJE | wc -l )" == "1" ]; then
		zenity --title "Mensaje" --entry --entry-text="$MENSAJE"
	else
		echo "$MENSAJE" | zenity --title "Mensaje" --width=450 --height=350 --text="¡Listo!" --text-info
	fi
}
function papelera {
	cat /dev/stdin | xsel
}
function progreso {
	zenity  --progress --pulsate  --auto-close  --auto-kill
}

#--------------- instalacion -----------------

if [ "$1" == "-i" ]; then
	NOMBRE=`basename $0`
	echo "$NOMBRE no esta instalado" | mostrar
	echo -e "[Desktop Entry]\nName=$NOMBRE\nDescription=No tengo nada que ocultar, pero mucho que proteger\nIcon=emblem-shared\nType=Application\nExec=$NOMBRE\nCategories=GTK;Utility;" > /tmp/$NOMBRE.desktop
	# dependencias
	TMP=$(mktemp)
	echo "apt-get install -y imagemagick steghide mcrypt pwgen
	cp $NOMBRE /usr/bin/
	cp /tmp/$NOMBRE.desktop /usr/share/applications/$NOMBRE.desktop" > $TMP
	gksu bash $TMP | progreso
	rm $TMP
	exit
fi
# hacer que funcione en otros Sistemas operativos y que sea mas simple

# -------------------------- programa ----------------------------------


# ¿Que queres hacer?
MENU=`echo  "Cifrar Descrifrar Quitar_metadatos Eliminar_archivos" | opciones -t "Secreto" -m "¿Que queres hacer?"`

case $MENU in
	0 )
	# Cifrar
	#------------------ entrada ----------------------
	MENU=`echo -e "Mensaje Archivo" | opciones -t "Ciframe" -m "¿Que deseas proteger?"` || exit
	case $MENU in
		0 )
			ef=`mensaje`
		;;
		1 )
			ef=`cat $(archivo || exit)`
		;;
	esac
	k=`clave $(pwgen  -1 -s)`
	MENU=`echo -e "Mensaje Archivo Imagen_al_azar tinyURL" | opciones -t "¿En donde?" -m "¿Donde lo queres ocultar?"` || exit
	case $MENU in
	0 )
		# genera el mensaje y lo muestra en base64
		m=`echo "$ef" | mcrypt -u -k "$k" -F | base64`
		echo "$m" | papelera
		echo "$m" | mostrar
		;;
	1 )
		# guardar en un archivo (propio)
		b=`archivo || exit`
		echo "$ef" | steghide embed -ef - -p "$k" -cf "$b"
		;;
	2 )
		# busca una imagen al azar en la web (con tor)
		# http://thepaperwall.com/rss.recentfifty.php
		img_url=`proxychains wget -qO - http://www.nasa.gov/rss/lg_image_of_the_day.rss \
		| grep -o '<enclosure [^>]*>' \
		| grep -o 'http://[^\"]*' | head -n 1`
		# ↑ esto deberia ser al azar y no estar en la NSA
		# directorio
		p=`clave`
		cf="$(pwgen -1 -s).jpg"
		# proxy
		cd $PICTURES
		echo $img_url > /dev/stderr
		proxychains wget "$img_url" -O "$cf"
		echo "$ef" | steghide embed -ef - -p "$p" -cf "$cf"
		xdg-open .
		;;
	3 )
		# publicar en tinyURL con Tor
		# genera el mensaje y lo muestra en base64
		m=`echo "$ef" | mcrypt -u -k "$k" -F | base64 -w0`
		for N in {1,2,3}; do
			sleep 3 | progreso &
			# si no se puede genera la tinyurl prueba varias veces
			u=`proxychains wget -U Mozilla "https://tinyurl.com/create.php?url=data:text/html;charset=utf-8;base64,$m" -qO - \
			| grep "'https://tinyurl.com/" | head -n 1 | cut -d "'" -f 2`
			echo "$u" && break || echo "no se genero la tinyURL" | error
		done
		echo "$u" | papelera
		url "$u"
		;;
	4 )
		# La idea serai publicar tanto en Pastie, o imagenes

		exit

		# "http://www.cjb.net/"=>{"image"=>"____"},
   		# "http://kimag.es/"=>{"userfile1"=>"____"},
		# "http://tinypic.com/"=>{"the_file"=>$ARGV[0]}
		# "http://uploadpie.com/"=>{"uploadedfile"=>$ARGV[0]}
		# "http://imgur.com/"=>{'file[]'=>$ARGV[0]}

	   	;;
		#fileinput # archivo
		#expire=4 # un dia
		# http://uploadpie.com/
	esac
	;;
	1 )
	# Descifrar

	# mensaje archivo o URL
	MENU=`echo -e "Mensaje Archivo En_la_red" | opciones -t "Descifrar" -m "¿Donde queres buscar?"` || exit
	case $MENU in
		0 )
			# descifrado
			t=`mensaje` || exit
			k=`clave`
			m=`$t | sed 's/\ [^1-9A-Za-z]=//g'| base64 -d | mdecrypt - -k "$k" -F` || error && exit

			# lo guarda en la papelera y lo muestra
			echo "$m" | papelera
			echo "$m" | mostrar
		;;
		1 )
			# archivo
			sf=`archivo` || exit
			# mensaje descifrado en archivo
			p=`clave`
			steghide extract -p "$p" -sf "$sf" -xf - | mostrar
		;;
		2 )
			# url
			URL=`url` || exit
			# mensaje descifrado en archivo
			p=`clave`
			# descargas
			if [ "$(echo $URL | grep tinyurl)" ]; then
				# contenida en la URL
				sf=`proxychains wget -S "$URL" -qO /dev/null 2> /dev/stdout | grep "Location:" | cut -d, -f2`
				tipo="text"
			else
				# contenida en el archivo
				sf=`proxychains wget "$URL" -qO -`
				tipo=`echo "$f" | file -i - | sed 's/^.*:\ //g; s/\/.*$//g'`
			fi
			# interpreta depende si es cifrado o estenografia
			if [ "$tipo" == "text" ]; then
				# si es un texto
				m=`echo $sf | sed -e :a -e 's/<[^>]*>//g;/</N;//ba' \
				| sed 's/\ [^1-9A-Za-z]=//g'| base64 -d | mdecrypt - -k "$p" -F`
			else
				# si es archivo
				m=`echo "$sf" | steghide extract -p "$p" -sf - -xf -`
			fi
			# borrar el archivo temporal para siempre
			echo "$m" | mostrar
		;;
	esac

	;;
	2 )
		# Quitar metadatos
		archivos  || exit | while read ARCHIVO; do
			# falta quitar las caras
			# opcion para romper pixels
			convert -strip "$ARCHIVO" "$ARCHIVO"
		done | progreso
	;;
	3 )
		# Eliminar archivos de modo seguro
		archivos || exit | while read ARCHIVO; do
			# borra el archivo para simpre
			shred -uz -n 10	"$(archivo)" | progreso
		done | progreso
	;;
esac

exit

# Como funciona

- ¿Que queres hacer?

  1a. buscar mensaje
     1a. ¿campo de entrada para el mensaje?
     1b. ¿desde un archivo?
       a. buscar archivo
     1b. ¿desde una URL?
       a. Feed (busca descifra y se queda a la espera) con Tor
       b. Archivo lo descarga con Tor descifra y borra (de modo seguro)
     2. poner password
     3. mensaje descifrado

  1b. ¿Que queres ocultar?
     1a. Mensaje
       a. campo de entrada para el mensaje de texto
     1b. Archivo
       b. campo para elegir el archivo
     2. generar archivo con mensaje oculto
       1a. ¿elige un archivo?
         b. campo para elegir el archivo
       1b. ¿descarga una imagen o audio al azar?
       2. la modifica sustancialmente
       3. agrega el mensaje al archivo
     3a. Publicación
       4. publica de modo anonimo usando Tor
     3b. Guardar (sobre escribe el archivo)

## Quehaceres

- ~~comprobacion de instalaciones~~
- ~~instalador~~
- hacer mas generico el instalador
